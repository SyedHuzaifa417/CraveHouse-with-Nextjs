// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String     @id @default(cuid())
  createdAt         DateTime   @default(now())
  username          String     @unique
  password          String?
  name              String?
  email             String?    @unique
  emailVerified     DateTime?  @map("email_verified")
  image             String?
  accounts          Account[]
  sessions          Session[]
  recipes           Recipe[]
  isCommunityMember Boolean    @default(false)
  isAdmin           Boolean    @default(false)
  bookmarkedRecipes Recipe[]   @relation("BookmarkedRecipes")
  deliveries        Delivery[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id        String     @id @default(cuid())
  name      String
  menuItems MenuItem[]
  recipes   Recipe[]

  @@map("categories")
}

model MenuItem {
  id            String         @id @default(cuid())
  name          String
  price         Float
  originalPrice Float?
  description   String
  imageUrl      String
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  deliveryItems DeliveryItem[]

  @@map("menu_items")
}

model Booking {
  id                  String   @id @default(cuid())
  date                DateTime
  time                String
  people              Int
  looking             String
  firstName           String
  lastName            String
  companyName         String?
  mobile              String
  email               String
  specialRequirements String[]
  requests            String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("bookings")
}

model Subscription {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  city      String
  createdAt DateTime @default(now())
}

model Recipe {
  id           String   @id @default(cuid())
  title        String
  image        String
  description  String
  ingredients  String[]
  instructions String[]
  servings     Int
  cookingTime  Int
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  date         DateTime @default(now())
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  cookingNote  String?
  bookmarkedBy User[]   @relation("BookmarkedRecipes")

  @@map("recipes")
}

model Delivery {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  address      String
  total        Float
  deliveryDate DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  items        DeliveryItem[]

  @@map("deliveries")
}

model DeliveryItem {
  id         String   @id @default(cuid())
  delivery   Delivery @relation(fields: [deliveryId], references: [id])
  deliveryId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String
  quantity   Int

  @@map("delivery_items")
}
